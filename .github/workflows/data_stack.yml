name: Deploy Data Stack

on:
  push:
    branches: [main, stage, dev]
  pull_request:
    branches: [main, stage]

permissions:
  id-token: write
  contents: read

jobs:
  cdk-deploy:
    name: Deploy Infrastructure via CDK 
    runs-on: ubuntu-latest
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      ACTIONS_OIDC_ROLE_ARN: ${{ secrets.ACTIONS_ROLE_ARN }}
      PROD_ACCOUNT_ID: ${{ secrets.PROD_ACCOUNT_ID }}
      STAGE_ACCOUNT_ID: ${{ secrets.STAGE_ACCOUNT_ID }}
      DEV_ACCOUNT_ID: ${{ secrets.DEV_ACCOUNT_ID }}
    steps: 
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set AWS Role ARN based on branch
        id: set-role
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "SNOWFLAKE_STAGE_FACT_CLAIMS=${BRANCH_NAME}_model_fact_claims_stage" >> $GITHUB_ENV
          echo "SNOWFLAKE_PIPE_FACT_CLAIMS=${BRANCH_NAME}_MODEL_CLAIMS_FACT_PIPE" >> $GITHUB_ENV
          if [[ $BRANCH_NAME == "main" ]]; then
            echo "ENV=PROD" >> $GITHUB_ENV
            echo "STAGE_BUCKET=stage-datalake-us-east-1-$PROD_ACCOUNT_ID" >> $GITHUB_ENV
            echo "CURATED_BUCKET=curated-datalake-us-east-1-$PROD_ACCOUNT_ID" >> $GITHUB_ENV
            echo "APPLICATION_BUCKET=application-datalake-us-east-1-$PROD_ACCOUNT_ID" >> $GITHUB_ENV
          elif [[ $BRANCH_NAME == "stage" ]]; then
            echo "ENV=STAGE" >> $GITHUB_ENV
            echo "STAGE_BUCKET=stage-datalake-us-east-1-$STAGE_ACCOUNT_ID" >> $GITHUB_ENV
            echo "CURATED_BUCKET=curated-datalake-us-east-1-$STAGE_ACCOUNT_ID" >> $GITHUB_ENV
            echo "APPLICATION_BUCKET=application-datalake-us-east-1-$STAGE_ACCOUNT_ID" >> $GITHUB_ENV
          else
            echo "ENV=DEV" >> $GITHUB_ENV
            echo "STAGE_BUCKET=stage-datalake-us-east-1-$DEV_ACCOUNT_ID" >> $GITHUB_ENV
            echo "CURATED_BUCKET=curated-datalake-us-east-1-$DEV_ACCOUNT_ID" >> $GITHUB_ENV
            echo "APPLICATION_BUCKET=application-datalake-us-east-1-$DEV_ACCOUNT_ID" >> $GITHUB_ENV
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ACTIONS_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Install AWS CDK
        run: npm install -g aws-cdk@2.1020.2

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: CDK Clean Stack
        run: cdk destroy --all --require-approval never --ci
  
      - name: CDK Bootstrap
        run: cdk bootstrap

      - name: CDK Diff
        run: cdk diff || true  # Prevents failure if there are changes

      - name: CDK Deploy
        run: cdk deploy --all --require-approval never --ci

  snowflake-deploy:
    name: Deploy to Snowflake
    runs-on: ubuntu-latest
    needs: cdk-deploy
    env:
      SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
      SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
      SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
      SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
      SNOWFLAKE_PRIVATE_KEY: ${{ secrets.SNOWFLAKE_PRIVATE_KEY }}
      SNOWFLAKE_STORAGE_INTEGRATION: S3_INTEGRATION
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Snowflake CLI
        run: |
          pip install snowflake-cli

      - name: Set environment-specific database and schema
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "SNOWFLAKE_STAGE_FACT_CLAIMS=${BRANCH_NAME}_model_fact_claims_stage" >> $GITHUB_ENV
          echo "SNOWFLAKE_PIPE_FACT_CLAIMS=${BRANCH_NAME}_MODEL_CLAIMS_FACT_PIPE" >> $GITHUB_ENV
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "SNOWFLAKE_BUCKET=application-datalake-us-east-1-${{ secrets.PROD_ACCOUNT_ID }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_DATABASE=HEALTH_TECH" >> $GITHUB_ENV
            echo "SNOWFLAKE_SCHEMA=PROD" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == "stage" ]]; then
            echo "SNOWFLAKE_BUCKET=application-datalake-us-east-1-${{ secrets.STAGE_ACCOUNT_ID }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_DATABASE=HEALTH_TECH" >> $GITHUB_ENV
            echo "SNOWFLAKE_SCHEMA=STAGE" >> $GITHUB_ENV
          else
            echo "SNOWFLAKE_BUCKET=application-datalake-us-east-1-${{ secrets.DEV_ACCOUNT_ID }}" >> $GITHUB_ENV
            echo "SNOWFLAKE_DATABASE=HEALTH_TECH" >> $GITHUB_ENV
            echo "SNOWFLAKE_SCHEMA=DEV" >> $GITHUB_ENV
          fi
          
      - name: Decode & write private key to file
        run: |
          echo "$SNOWFLAKE_PRIVATE_KEY" | base64 -d > /tmp/private_key.pem
          chmod 600 /tmp/private_key.pem

      - name: Configure Snowflake CLI profile
        run: |
          mkdir -p ~/.snowflake
          cat <<EOF > ~/.snowflake/config.toml
          [connections.my_snowflake]
          account = "$SNOWFLAKE_ACCOUNT"
          user = "$SNOWFLAKE_USER"
          authenticator = "SNOWFLAKE_JWT"
          private_key_path = "/tmp/private_key.pem"
          database = "$SNOWFLAKE_DATABASE"
          schema = "$SNOWFLAKE_SCHEMA"
          role = "$SNOWFLAKE_ROLE"
          warehouse = "$SNOWFLAKE_WAREHOUSE"
          EOF
          chmod 600 ~/.snowflake/config.toml

      - name: Deploy data warehouse galaxy model
        run: |
          snow connection set-default my_snowflake
          for file in $(ls data_warehouse_stack/data_warehouse_data_model/*.sql | sort); do
            echo "Running $file..."
            snow sql -f "$file"
          done 

      - name: Deploy data mart(s)
        run: |
          snow connection set-default my_snowflake
          for file in $(ls data_warehouse_stack/data_mart/*.sql | sort); do
            echo "Running $file..."
            snow sql -f "$file"
          done 

      - name: Deploy roles
        run: |
          snow connection set-default my_snowflake
          for file in $(ls data_warehouse_stack/role_permissions/*.sql | sort); do
            echo "Running $file..."
            snow sql -f "$file"
          done 

      - name: Deploy external stage .. storage integration
        run: |
          snow connection set-default my_snowflake
          SNOWFLAKE_STAGE_FACT_CLAIMS_URL=s3://${SNOWFLAKE_BUCKET}/claims/model/fact/
          snow sql -q "CREATE OR REPLACE STAGE ${SNOWFLAKE_STAGE_FACT_CLAIMS} URL = '${SNOWFLAKE_STAGE_FACT_CLAIMS_URL}' STORAGE_INTEGRATION = ${SNOWFLAKE_STORAGE_INTEGRATION}"
    
      - name: Declare snowpipe for data model
        run: |
          snow connection set-default my_snowflake
          snow sql -q "CREATE OR REPLACE PIPE ${SNOWFLAKE_PIPE_FACT_CLAIMS} AUTO_INGEST = FALSE AS COPY INTO FACT_CLAIMS FROM @${SNOWFLAKE_STAGE_FACT_CLAIMS} FILE_FORMAT = (TYPE = 'PARQUET') MATCH_BY_COLUMN_NAME = CASE_INSENSITIVE"

